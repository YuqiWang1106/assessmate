from django.conf import settings



def google_callback(request):
    """After successful Google login, retrieves user info and redirects to proper dashboard"""
    code = request.GET.get("code") # gets authorization code from Google's response after successful login
    role = request.GET.get("state") # role from url, created in google_login()

    if not code or not role:
        return redirect("landing")
    
    # authorization code is exchanged to get token ID
    data = {
        "code": code,
        "client_id": "***REMOVED***",
        "client_secret": "***REMOVED***",
        "redirect_uri": GOOGLE_REDIRECT_URI,
        "grant_type": "authorization_code",
    }
    response = requests.post(GOOGLE_TOKEN_URL, data=data)
    token_info = response.json()

    if "id_token" not in token_info:
        return redirect("landing")
    
    # with token ID, can get info on user from Google
    headers = {"Authorization": f"Bearer {token_info['access_token']}"}
    user_info_response = requests.get(GOOGLE_USERINFO_URL, headers=headers)
    user_info = user_info_response.json()

    email = user_info.get("email")
    name = user_info.get("name")

    # ensures only BC emails can have further access
    if not email.endswith("@bc.edu"):
        return HttpResponseForbidden("Please use a @bc.edu email")
    
    try:
        user = User.objects.get(email=email)
        if user.role != role:
            return redirect(f"/?error=role_mismatch")
    except User.DoesNotExist:

        user = User.objects.create(
            email=email,
            name=name,
            role=role,
            created_at=now()
        )
        if role == "teacher":
            Course.objects.create(
                teacher=user,
                course_name="Welcome to Assessmate!",
                course_number="Teacher101",
                created_at=now()
            )
        elif role == "student":
            intro_course, _ = Course.objects.get_or_create(
                course_name="Welcome to Assessmate!",
                course_number="Student101",
                defaults={"teacher": None, "created_at": now()}
            )
            CourseMember.objects.create(course=intro_course, user=user)

    

    # store the user session to restrict access to protected pages -> done in dashboard views
    request.session["user_id"] = str(user.id)
    request.session["user_email"] = user.email
    request.session["user_role"] = user.role

    # Invitation Logic
    # 取出邀请信息
    invited_email = request.session.get("invited_email")
    invited_course_id = request.session.get("invited_course_id")

    # 如果当前用户是学生，并且是通过邀请链接进来的
    if user.role == "student" and invited_email == email and invited_course_id:
        try:
            invited_course = Course.objects.get(id=invited_course_id)
            # 如果还没有加入该课程，就创建 CourseMember
            if not CourseMember.objects.filter(user=user, course=invited_course).exists():
                CourseMember.objects.create(user=user, course=invited_course)
        except Course.DoesNotExist:
            pass  # 课程不合法就忽略

        # 清除 session 中的邀请信息
        request.session.pop("invited_email", None)
        request.session.pop("invited_course_id", None)

    

    # redirects user to their respective dashboard
    if user.role == "teacher":
        return redirect("teacher_dashboard", teacher_id=user.id)
    else:
        return redirect("student_courses", user_id=user.id)





# Sending Invite to Student
@csrf_exempt
@require_POST
def invite_student(request):
    """Invite a student to a course by email (sends email with special invite link)."""
    try:
        data = json.loads(request.body)
        email = data.get("email")
        course_id = data.get("course_id")

        if not email or not course_id:
            return JsonResponse({"success": False, "message": "Missing email or course ID."}, status=400)

        course = get_object_or_404(Course, id=course_id)

        invite_link = f"http://127.0.0.1:8000/invite/accept/?course_id={course_id}&email={email}"

        message = f"""
Hi,

You have been invited to join the course: "{course.course_name}" on Assessmate!

Click the link below to join:
{invite_link}

After clicking the link, you’ll be prompted to log in or register using your @bc.edu Google account.

See you on Assessmate!
"""

        send_mail(
            subject=f"Invitation to join {course.course_name} on Assessmate",
            message=message,
            from_email="no-reply@assessmate.edu",
            recipient_list=[email],
            fail_silently=False,  # True for production if you want to avoid errors
        )

        return JsonResponse({"success": True, "message": f"Invitation sent to {email}"})
    
    except Exception as e:
        return JsonResponse({"success": False, "message": str(e)}, status=500)

# @csrf_exempt
# @require_POST
# def invite_student(request):
#     """Invite a student to a course by email."""
#     try:
#         data = json.loads(request.body)
#         email = data.get("email")
#         course_id = data.get("course_id")

#         if not email or not course_id:
#             return JsonResponse({"success": False, "message": "Missing email or course ID."}, status=400)

#         course = get_object_or_404(Course, id=course_id)
        

#         # Get or create user
#         student, _ = User.objects.get_or_create(
#             email=email,
#             defaults={"name": email.split("@")[0], "role": "student", "created_at": timezone.now()}
#         )

#         # Create CourseMember if they don't already exist
#         course_member, created = CourseMember.objects.get_or_create(course=course, user=student)

#         # send email
#         send_mail(
#             subject="You're invited to join a course on Assessmate!",
#             message=f"You have been invited to join the course '{course.course_name}' on Assessmate.",
#             from_email="no-reply@assessmate.edu",
#             recipient_list=[email],
#             fail_silently=True
#         )

#         return JsonResponse({"success": True, "message": f"{email} has been invited!"})
#     except Exception as e:
#         return JsonResponse({"success": False, "message": str(e)}, status=500)




# Student Accept Invitation
def accept_invitation(request):
    email = request.GET.get("email")
    course_id = request.GET.get("course_id")

    if not email or not course_id:
        return HttpResponseForbidden("Invalid invitation link.")

    request.session["invited_email"] = email
    request.session["invited_course_id"] = course_id

    return redirect(f"/accounts/google/login/?role=student")














teacehr_rashboard
    <!-- Invite Students Popup Window  -->
    <div id="invite-modal" class="modal">
        <div class="modal-content">
            <span class="close-btn">&times;</span>
            <h2>Invite a Student</h2>
            <form id="invite-form">
                <label for="student-email">Student Email:</label>
                <input type="email" id="student-email" name="email" required placeholder="example@school.edu">
                <button type="submit">Send Invite</button>
            </form>
        </div>
    </div>